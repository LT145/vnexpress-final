generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  password       String?
  role           UserRole        @default(USER)
  createdAt      DateTime        @default(now())
  avatar         String?
  googleId  String?  @unique
  //advertisements Advertisement[]
  comments       Comment[]
  followers      Follow[]        @relation("Followers")
  following      Follow[]        @relation("Following")
  likes          Like[]
  posts          Post[]
  profile        Profile?
  reports        Report[]
  accounts       Account[]
  sessions       Session[]

}

model Profile {
  id        String    @id @default(cuid())
  gender    Gender?
  phone     String?
  address   String?
  birthDate DateTime?
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  published Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  authorId  String
  imageUrls String[]
  status    PostStatus @default(DRAFT)
  publishedAt DateTime?
  authorName  String?
  comments  Comment[]
  likes     Like[]
  author    User       @relation(fields: [authorId], references: [id])
  reports   Report[]
  //adPlaces  AdPlace[]  @relation("AdPlaceToPost")
  categories Category[] @relation("PostToCategory")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  likes     Like[]
  reports   Report[]  // Add this line

  @@map("comments")
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  postId    Int?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Category {
  id       String   @id @default(cuid())
  name     String   @unique
  posts    Post[]   @relation("PostToCategory")
}

model Report {
  id         String       @id @default(cuid())
  reason     String
  status     ReportStatus @default(PENDING)
  notes      String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  postId     Int?
  commentId  String?
  reporterId String
  type       ReportType   @default(POST)
  post       Post?        @relation(fields: [postId], references: [id])
  comment    Comment?     @relation(fields: [commentId], references: [id])
  reporter   User         @relation(fields: [reporterId], references: [id])

  @@map("reports")
}

enum ReportType {
  POST
  COMMENT
}

enum ReportStatus {
  PENDING
  ACCEPTED
  REJECTED
}
/*
model Advertisement {
  id            String   @id @default(cuid())
  title         String
  description   String
  imageUrl      String
  targetUrl     String
  startDate     DateTime
  endDate       DateTime
  status        String
  placementType String   // Add this line
  position      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  advertiserId  String
  payments     AdPayment[]
  stats        AdStat[]
  advertiser   User        @relation(fields: [advertiserId], references: [id])
  adPlaces     AdPlace[]   @relation("AdPlaceToAdvertisement")
}

model AdPlace {
  id             String          @id @default(cuid())
  name           String
  description    String?
  position       String
  maxAds         Int
  advertisements Advertisement[] @relation("AdPlaceToAdvertisement")
  posts          Post[]          @relation("AdPlaceToPost")
}

model AdPayment {
  id              String        @id @default(cuid())
  amount          Float
  currency        String
  status          PaymentStatus @default(PENDING)
  method          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id])
}

model AdStat {
  id              String        @id @default(cuid())
  impressions     Int           @default(0)
  clicks          Int           @default(0)
  date            DateTime      @default(now())
  advertisementId String
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id])

  @@unique([advertisementId, date])
}
*/
enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

enum UserRole {
  USER
  ADMIN
  EDITOR
  MODERATOR
  ADVERTISER
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PRIVATE
}


enum AdStatus {
  PENDING
  ACTIVE
  PAUSED
  ENDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}


